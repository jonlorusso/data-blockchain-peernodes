package com.swatt.chainNode.dao;

/*  =============================  DO NOT EDIT ANY OF THIS FILE  ============================= 
 * 
 *     THIS IS AUTO-GENERATED CODE WAS CREATED BY gerrySeidman.tools.sql.ExcelSqlCodegen
 * 
 *  =============================  DO NOT EDIT ANY OF THIS FILE  ============================= 
 */

import java.sql.*;
import java.util.*;
import java.io.*;
import javax.sql.DataSource;
import javax.naming.*;

public class ChainNodeDetails  {
	private int id;
	private long name;
	private long description;
	private int units;
	private int txFeeUnits;

	public ChainNodeDetails() { }

	public ChainNodeDetails(int id, long name, long description, int units, int txFeeUnits) {
		this.id = id;
		this.name = name;
		this.description = description;
		this.units = units;
		this.txFeeUnits = txFeeUnits;
	}

	public final int getId() { return id; }
	public final long getName() { return name; }
	public final long getDescription() { return description; }
	public final int getUnits() { return units; }
	public final int getTxFeeUnits() { return txFeeUnits; }

	public final void setName(long name) { this.name = name; }
	public final void setDescription(long description) { this.description = description; }
	public final void setUnits(int units) { this.units = units; }
	public final void setTxFeeUnits(int txFeeUnits) { this.txFeeUnits = txFeeUnits; }

	public static String getSqlColumnList() { return "ID, NAME, DESCRIPTION, UNITS, TX_FEE_UNITS"; }
	private final static String primaryKeySelect = "SELECT ID, NAME, DESCRIPTION, UNITS, TX_FEE_UNITS FROM CHAIN_NODE_DETAILS WHERE ID = ?";

	public static String getStandardTableName() { return "CHAIN_NODE_DETAILS"; } 

	public ChainNodeDetails(ResultSet rs) throws SQLException { 
		id = rs.getInt(1);

		java.sql.Timestamp nameAsTimestamp = rs.getTimestamp(2);

		if (nameAsTimestamp != null)
			name = nameAsTimestamp.getTime();


		java.sql.Timestamp descriptionAsTimestamp = rs.getTimestamp(3);

		if (descriptionAsTimestamp != null)
			description = descriptionAsTimestamp.getTime();

		units = rs.getInt(4);
		txFeeUnits = rs.getInt(5);
	}

	 public static Collection getChainNodeDetailss(PreparedStatement ps) throws SQLException {
		ResultSet rs = ps.executeQuery();

		return getChainNodeDetailss(rs);
	}

	 public static Collection getChainNodeDetailss(ResultSet rs) throws SQLException {
		ArrayList results = new ArrayList(100);

		while(rs.next())
			results.add(new ChainNodeDetails(rs));

		return results;
	}

	private static String SELECT_ALL_QUERY = "SELECT " + getSqlColumnList() + " FROM " + getStandardTableName();

	public static Collection getChainNodeDetailss(Connection connection) throws SQLException {
		return getChainNodeDetailss(connection, null);
	}

	public static Collection getChainNodeDetailss(Connection connection, String where) throws SQLException {
		String query = SELECT_ALL_QUERY;

		if (where != null)
			query += " WHERE " + where;

		PreparedStatement ps = connection.prepareStatement(query);
		ResultSet rs = ps.executeQuery();

		return getChainNodeDetailss(rs);
	}

	public static Collection getChainNodeDetailss(DataSource dataSource, String where) throws SQLException {
		Connection connection = dataSource.getConnection();
		Collection results = getChainNodeDetailss(connection, where);
		connection.close();
		return results;
	}

	public static Collection getChainNodeDetailss(String jndiName, String where) throws SQLException, NamingException {
		InitialContext ctx = new InitialContext();
		DataSource dataSource = (DataSource) ctx.lookup(jndiName);
		return getChainNodeDetailss(dataSource, where);
	}

	public static Collection getChainNodeDetailss(String jndiName) throws SQLException, NamingException {
		return getChainNodeDetailss(jndiName, null);
	}

	public static Collection getChainNodeDetailss(DataSource dataSource) throws SQLException {
		return getChainNodeDetailss(dataSource, null);
	}

	public static ChainNodeDetails createChainNodeDetails(Connection connection, long name, long description, int units, int txFeeUnits) throws SQLException {
		boolean storedAutoCommitValue = connection.getAutoCommit();

		if(storedAutoCommitValue)
			connection.setAutoCommit(false);

		PreparedStatement ps = connection.prepareStatement("INSERT INTO CHAIN_NODE_DETAILS (NAME, DESCRIPTION, UNITS, TX_FEE_UNITS) VALUES (?, ?, ?, ?)");

		ps.setTimestamp(1, new java.sql.Timestamp(name));
		ps.setTimestamp(2, new java.sql.Timestamp(description));
		ps.setInt(3, units);
		ps.setInt(4, txFeeUnits);
		ps.executeUpdate();

		int autoGeneratedKey = 0;

		ps = connection.prepareStatement("Select MAX(ID) FROM CHAIN_NODE_DETAILS");
		ResultSet rs = ps.executeQuery();

		if (rs.next())
			autoGeneratedKey = rs.getInt(1);

		if(storedAutoCommitValue) {
			connection.commit();
			connection.setAutoCommit(true);
		}

		return new ChainNodeDetails(autoGeneratedKey, name, description, units, txFeeUnits);
	}

	public static ChainNodeDetails updateChainNodeDetails(Connection connection, int id, long name, long description, int units, int txFeeUnits) throws SQLException {
		PreparedStatement ps = connection.prepareStatement("UPDATE CHAIN_NODE_DETAILS SET NAME = ?, DESCRIPTION = ?, UNITS = ?, TX_FEE_UNITS = ? WHERE ID = ?");

		ps.setTimestamp(1, new java.sql.Timestamp(name));
		ps.setTimestamp(2, new java.sql.Timestamp(description));
		ps.setInt(3, units);
		ps.setInt(4, txFeeUnits);
		ps.executeUpdate();

		return new ChainNodeDetails(id, name, description, units, txFeeUnits);
	}

	public static ChainNodeDetails createChainNodeDetails(Connection connection, ChainNodeDetails chainNodeDetails) throws SQLException {
		boolean storedAutoCommitValue = connection.getAutoCommit();

		if(storedAutoCommitValue)
			connection.setAutoCommit(false);

		PreparedStatement ps = connection.prepareStatement("INSERT INTO CHAIN_NODE_DETAILS (NAME, DESCRIPTION, UNITS, TX_FEE_UNITS) VALUES (?, ?, ?, ?)");

		ps.setTimestamp(1, new java.sql.Timestamp(chainNodeDetails.name));
		ps.setTimestamp(2, new java.sql.Timestamp(chainNodeDetails.description));
		ps.setInt(3, chainNodeDetails.units);
		ps.setInt(4, chainNodeDetails.txFeeUnits);
		ps.executeUpdate();

		int autoGeneratedKey = 0;

		ps = connection.prepareStatement("Select MAX(ID) FROM CHAIN_NODE_DETAILS");
		ResultSet rs = ps.executeQuery();

		if (rs.next())
			autoGeneratedKey = rs.getInt(1);

		if(storedAutoCommitValue) {
			connection.commit();
			connection.setAutoCommit(true);
		}

		chainNodeDetails.id = autoGeneratedKey;
		return chainNodeDetails;
	}

	public static ChainNodeDetails updateChainNodeDetails(Connection connection, ChainNodeDetails chainNodeDetails) throws SQLException {
		PreparedStatement ps = connection.prepareStatement("UPDATE CHAIN_NODE_DETAILS SET NAME = ?, DESCRIPTION = ?, UNITS = ?, TX_FEE_UNITS = ? WHERE ID = ?");

		ps.setTimestamp(1, new java.sql.Timestamp(chainNodeDetails.name));
		ps.setTimestamp(2, new java.sql.Timestamp(chainNodeDetails.description));
		ps.setInt(3, chainNodeDetails.units);
		ps.setInt(4, chainNodeDetails.txFeeUnits);
		ps.setInt(5, chainNodeDetails.id);
		ps.executeUpdate();

		return chainNodeDetails;
	}

	public static void deleteAll(Connection connection) throws SQLException {
		PreparedStatement ps = connection.prepareStatement("TRUNCATE TABLE CHAIN_NODE_DETAILS");
		ps.executeUpdate();
	}

	public static ChainNodeDetails getChainNodeDetails(Connection connection, int id) throws SQLException {
		PreparedStatement ps = connection.prepareStatement(primaryKeySelect);

		ps.setInt(1, id);
		ResultSet rs = ps.executeQuery();

		if (rs.next())
			return new ChainNodeDetails(rs);
		else
			return null;
	}


}